#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');
const { query } = require('../utils/async-db')

// 引入redis库
var redis = require('redis');
var redisStore = require('koa-redis');
var client = redis.createClient(6379, "127.0.0.1", { password: "124.95redis" });
// var client = redis.createClient(6379, "127.0.0.1");
const expire = 60*60
var options = {client: client, db: 0};
var store = redisStore(options);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8888');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */
// 配置socket.io
const io = require('socket.io')(server)

// 通信连接
io.on('connection', (socket) => {

  // 获取请求建立socket连接的url
  // 如: http://localhost:3000/room/room_1, roomID为room_1
  var socketId=socket.id;
    console.log(socketId+'an  connected')
  // var url = socket.request.headers.referer;
  // var splited = url.split('/');
  // var roomID = splited[splited.length - 1];   // 获取房间ID
  // var user = '';

  // socket.on('join', function (userName) {
  //   user = userName;
 
  //   // 将用户昵称加入房间名单中
  //   if (!roomInfo[roomID]) {
  //     roomInfo[roomID] = [];
  //   }
  //   roomInfo[roomID].push(user);
 
  //   socket.join(roomID);    // 加入房间
  //   // 通知房间内人员
  //   socketIO.to(roomID).emit('sys', user + '加入了房间', roomInfo[roomID]);  
  //   console.log(user + '加入了' + roomID);
  // });

  socket.on('join', async (roomID)=> {

    // 将用户昵称加入房间名单中
    // if (!roomInfo[roomID]) {
    //   roomInfo[roomID] = [];
    // }
    // roomInfo[roomID].push(user);
    
    // 加入房间
    socket.join(roomID);    
    
    console.log('加入了'+roomID);
    // 通知房间内人员
    socket.to(roomID).emit('joinRoom',roomID); 
    
  })

  // 群聊
  // socket.on('sendGroupMsg', function (data) {
  //   console.log('发送了'+data)
  //   socket.broadcast.emit('receiveGroupMsg', data);
  // });

  // 接收用户消息,发送相应的房间
   socket.on('sendGroupMsg', async (data,roomID)=> {

    // 保存数据在redis
    let room=`${roomID}`
    const newData=JSON.stringify(data)

    // 判断redis是否已存在群id
    if(store.client.exists(room)){
      // 存在的话，就添加群信息
      await store.client.rpush(room, newData)
    }else{
      // 否则，不存在的话，就新建列表，存储信息
      await store.client.lset(room, 0, newData)
    }

    // 查询群会员
    let sql = ` select member_id,realname from (hs_sz_yi_teams_member left join hs_sz_yi_member on hs_sz_yi_teams_member.member_id = hs_sz_yi_member.id) left join hs_sz_yi_teams on hs_sz_yi_teams.id=hs_sz_yi_teams_member.teamId where hs_sz_yi_teams_member.teamId=${roomID}  `

    let TeamMembers= await query(sql)

    // 遍历群会员，写入消息已读状态为未读
    TeamMembers.map(async v=>{
      if(v.realname== data.from){
        await store.client.hmset(`user${v.member_id}`, room,1)
      }else{
        await store.client.hmset(`user${v.member_id}`, room,0)
      }
    })
    console.log( TeamMembers )
    
    console.log('发送了'+data,'房间id:'+roomID)
    // 广播群聊信息
    socket.broadcast.to(roomID).emit('receiveGroupMsg', data,roomID);
  })

  // 上线
  // socket.on('online', name => {
  //   console.log(name+'  上线了')
  //   socket.broadcast.emit('online', name)
  // });

  // socket.on('disconnect', function () {
    // 从房间名单中移除
    // var index = roomInfo[roomID].indexOf(user);
    // if (index !== -1) {
    //   roomInfo[roomID].splice(index, 1);
    // }
 
  //   socket.leave(roomID);    // 退出房间
  //   // socketIO.to(roomID).emit('sys', user + '退出了房间', roomInfo[roomID]);
  //   console.log('退出了' + roomID);
  // });

  // 接收用户消息,发送相应的房间
  // socket.on('message', function (msg) {
  //   // 验证如果用户不在房间内则不给发送
  //   if (roomInfo[roomID].indexOf(user) === -1) {  
  //     return false;
  //   }
  //   socketIO.to(roomID).emit('msg', user, msg);
  // });
    socket.on('disconnect', () => {
        console.log(socketId+'disconnected')
    })

})

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
